# -*- coding: utf-8 -*-
"""QuotesWebApp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11SajhaLwXAokx51I8jS_p6vhf-26P0Pb
"""

import pandas as pd
import numpy as np
import nltk
from random import randrange

quotes= pd.read_excel("https://github.com/superchromat/artificial-intelligence/blob/main/web%20app/BQ.xlsx?raw=true")
quotes

"""Import Natural Language Toolkit (nltk) and the Sentiment Intensity Analyzer package.
More information can be found on: 
https://github.com/cjhutto/vaderSentiment
"""

nltk.download('vader_lexicon')

"""The compound score is computed by summing the valence scores of each word in the lexicon, adjusted according to the rules, and then normalized to be between -1 (most extreme negative) and +1 (most extreme positive). This is the most useful metric if you want a single unidimensional measure of sentiment for a given sentence. Calling it a 'normalized, weighted composite score' is accurate.


"""

from nltk.sentiment.vader import SentimentIntensityAnalyzer
# instantiate the SIA
sid = SentimentIntensityAnalyzer()
all_compounds = []
# loop through each one of the quotes
for sentence in quotes['Quote']:
  print(sentence)
  # call the polarity scores
  ss = sid.polarity_scores(sentence)
  for i in sorted(ss):
    print('{0}: {1}, '.format(i, ss[i]), end='')
    print()

    if i == 'compound':
      all_compounds.append(ss[i])

# print the first 10 compound scores
all_compounds[0:10]

# plot the scores
import matplotlib.pyplot as plt
plt.plot(sorted(all_compounds))
plt.title('Overall sentiment in quote stash')
plt.grid()

"""Based on the distribution above the sentiments are mostly positive, with a few neutrals and some negatives.

Let's look at some examples
"""

# pass in the compound scores as a new column in the dataframe
quotes['sentiment_score'] = all_compounds
quotes.head()

# to compare scores
# the most negative score
print(np.min(quotes['sentiment_score']))
# most positive
print(np.max(quotes['sentiment_score']))

# the most negative
quotes[quotes['sentiment_score'] == np.min(quotes['sentiment_score'])]

# the most positive
quotes[quotes['sentiment_score'] == np.max(quotes['sentiment_score'])]

# to see the entire quote, add ['Quote'].values
quotes[quotes['sentiment_score'] == np.max(quotes['sentiment_score'])]['Quote'].values

"""Now we can create the quote movement.
* Load the quote stash and assign index scores
* handle user requests for new quotes, up or down on thr sentiment ladder
"""

# create a function to load the quote stash
# this function will only be called once when you restart the server

# declare global variable
quotes = None
# function
def prepare_sentiment_quote_stash(quote_stash_path):
  global quotes
  # load quote stash
  quotes = pd.read_excel("https://github.com/superchromat/artificial-intelligence/blob/main/web%20app/BQ.xlsx?raw=true")
  # instantiate the analyzer
  sid = SentimentIntensityAnalyzer()#
  # create a list to store the compound scores
  all_compounds = []
  # loop through each one of the quotes
  for sentence in quotes['Quote']:
    print(sentence)
    # call the polarity scores
    ss = sid.polarity_scores(sentence)
    for i in sorted(ss):
      print('{0}: {1}, '.format(i, ss[i]), end='')
      print()

      if i == 'compound':
        all_compounds.append(ss[i])
  #
  # add sentiment to the data
  quotes['sentiment_score'] = all_compounds

  # create ladder index
  quotes = quotes.sort_values('sentiment_score')
  quotes['index'] = [ix for ix in range(0, len(quotes))]
  return quotes

# run the program
prepare_sentiment_quote_stash('BQ.xlsx')#
quotes.head()

"""Handle user requests for new quotes on the sentiment ladder."""

max_index_value = np.max(quotes['index'].values)

# this function is called when a user opens the webpage or when the user calls for another quote
def gimme_a_quote(direction = None, current_index = None):
    # calls a random number between 0 and the max index value
    # and holds it just in case
    rand_index = randrange(max_index_value)
    # brighter and darker are the directions we want to move within
    darker = None
    brighter = None 
    
    # New session visit
    if current_index is None:
        brighter = rand_index
    # if they want a happier quote  
    if direction == 'brighter':
        brighter = current_index    
    else:
        darker = current_index
    # if they want a darker quote
    # this is a placeholder     
    if darker is not None:
        current_index = rand_index
        # check
        try:
            # in flask you have to make sure it casts to an integer
            current_index = int(darker)
        except ValueError:
            # somebody is gaming the system
            current_index = rand_index

        # since the lowest value in the index is 0 we have to catch situations where#
        # user is trying to go lower   
        if current_index > 0:
            # try for a lesser value than current one
            rand_index = randrange(0, current_index)
            # this print statement is just for the debugger
            print('darker')
        else:
            # already at lowest point so assign a new random of full set
            rand_index = rand_index

    # now we do the same in the other direction
    elif brighter is not None:

        try:
            current_index = int(brighter)
        except ValueError:
            # somebody is gaming the system
            current_index = rand_index

        # try for a higher value than current one
        if current_index < max_index_value -1:
            rand_index = randrange(current_index, max_index_value)
            print('brighter')
        else:
            # already at highest point so assign a new random of full set
            rand_index = rand_index

    else:
        # grab a random value
        rand_index = rand_index
        
    return (rand_index)
        
# test the function
gimme_a_quote('darker', 20)

quotes[quotes['index'] == gimme_a_quote('brighter', 34)]

quotes[quotes['index'] == gimme_a_quote('darker', 49)]

Image(filename='flask-folder-structure.png', width='500px~')

